@page "/message/list"
@using AutoMapper
@using BlazorChat.Service
@using Server.Infrastructure
@inject NavigationManager Navigation
@inject IObjectService<MessageModel, MessageCreate, MessageUpdate> MessageService
@inject IMapper mapper
<link href="~/css/bootstrap/bootstrap.min.css">
<div class="float-end" style="width:10px"></div>




<a href="/message/add" class="btn btn-success float-end">Add message</a>
<div class="float-end" style="width:10px"></div>
<h2 class="mt-3 mb-3">Messages</h2>

@if (messages == null)
{
    <p><em>Loading...</em></p>
}
else if (!messages.Any())
{
    <p>No messages available.</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr class="text-center align-middle">
                <th>Id</th>
                <th>Sender id</th>
                <th>Text</th>
                <th>Send time</th>
                <th>Chat room id</th>
                <th>MessagUserId</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var message in messages)
            {
                <tr class="text-center align-middle">
                    <td><strong>@message.Id</strong></td>
                    <td><strong>@message.SenderId</strong></td>
                    <td><strong>@message.Text</strong></td>
                    <td><strong>@message.SendTime</strong></td>
                    <td><strong>@message.ChatRoomId</strong></td>
                    <td><strong>@message.MessedgeUsersId</strong></td>
                    <td class="text-center d-flex justify-content-evenly">
                        <a href="message/@message.Id" class="btn btn-warning">Edit</a>
                        <button @onclick="() => Delete(message.Id)" class="btn btn-danger">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<MessageModel> messages = new List<MessageModel>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            MessageService.SetEndpoint("message");
            messages = await MessageService.GetObjects();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching messages: {ex.Message}");
        }
    }
    async Task Delete(Guid id)
    {
        await MessageService.DeleteObject(id);
        messages = await MessageService.GetObjects();
    }
}